
External interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a4  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fc  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000158  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000199  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	90 e0       	ldi	r25, 0x00	; 0
 int x=0; 
 	
 for (x=0; x<4; x++)
 { 	 
	PORTD &=~(1<<PD0); 
  84:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e7       	ldi	r18, 0x7F	; 127
  88:	38 e3       	ldi	r19, 0x38	; 56
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	40 40       	sbci	r20, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <__vector_1+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <__vector_1+0x2a>
  96:	00 00       	nop
	_delay_ms(50); 
   PORTD |=(1<<PD0);
  98:	90 9a       	sbi	0x12, 0	; 18
  9a:	2f e7       	ldi	r18, 0x7F	; 127
  9c:	38 e3       	ldi	r19, 0x38	; 56
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__vector_1+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_1+0x3e>
  aa:	00 00       	nop
  ac:	01 97       	sbiw	r24, 0x01	; 1

ISR(INT0_vect)
{
 int x=0; 
 	
 for (x=0; x<4; x++)
  ae:	51 f7       	brne	.-44     	; 0x84 <__vector_1+0x18>
	PORTD &=~(1<<PD0); 
	_delay_ms(50); 
   PORTD |=(1<<PD0);
   _delay_ms(50);
 }
 PORTD &=~(1<<PD0); 
  b0:	90 98       	cbi	0x12, 0	; 18
 
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	4f 91       	pop	r20
  b8:	3f 91       	pop	r19
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void)
{
    // pin INT0 is input 
	DDRD &=~(1<<PD2); 
  c6:	8a 98       	cbi	0x11, 2	; 17
	// pin dx is output 
   DDRD |=1<<PD0; 
  c8:	88 9a       	sbi	0x11, 0	; 17
    PORTD |=(1<<PD0); //enable pull up resistor 
  ca:	90 9a       	sbi	0x12, 0	; 18
	//RED LED	
   DDRD |=(1<<PD3); 
  cc:	8b 9a       	sbi	0x11, 3	; 17
   PORTD &=~(1<<PD3); 
  ce:	93 98       	cbi	0x12, 3	; 18
   
  
	// enable int0 interrupt
	 GICR |=(1<<INT0); 
  d0:	8b b7       	in	r24, 0x3b	; 59
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	8b bf       	out	0x3b, r24	; 59
	// enable global interrupt
	sei(); 
  d6:	78 94       	sei
	
    while (1) 
    {
	   PORTD ^=(1<<PD3); 
  d8:	98 e0       	ldi	r25, 0x08	; 8
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	89 27       	eor	r24, r25
  de:	82 bb       	out	0x12, r24	; 18
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	32 e5       	ldi	r19, 0x52	; 82
  e4:	87 e0       	ldi	r24, 0x07	; 7
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x2a>
  f0:	00 00       	nop
  f2:	f3 cf       	rjmp	.-26     	; 0xda <main+0x14>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
